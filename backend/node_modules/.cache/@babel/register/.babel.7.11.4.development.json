{
  "{\"sourceRoot\":\"/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend\",\"filename\":\"/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend",
      "filename": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/server.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// const articlesInfo = {\n//   'learn-react': {\n//       upvotes: 0,\n//       comments : [],\n//   },\n//   'learn-node': {\n//       upvotes: 0,\n//       comments : []\n//   },\n//   'my-thoughts-on-resumes': {\n//       upvotes: 0,\n//       comments : []\n//   },\n// }\nvar app = (0, _express[\"default\"])();\napp.use(_bodyParser[\"default\"].json());\napp.get(\"/api/articles/:name\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n    var articleName, client, db, articleInfo;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            articleName = req.params.name;\n            _context.next = 4;\n            return _mongodb.MongoClient.connect('mongodb://localhost:27017', {\n              useNewUrlParser: true,\n              useUnifiedTopology: true\n            });\n\n          case 4:\n            client = _context.sent;\n            db = client.db('my-blog'); //query db\n\n            _context.next = 8;\n            return db.collection('articles').findOne({\n              name: articleName\n            });\n\n          case 8:\n            articleInfo = _context.sent;\n            res.status(200).json(articleInfo);\n            client.close();\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            res.status(500).json({\n              message: 'Error connecting to db',\n              err: _context.t0\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}()); // app.post(\"/api/articles/:name/upvote\", (req, res) => {\n//   const articleName = req.params.name;\n//   articlesInfo[articleName].upvotes += 1;\n//   res.status(200).send(`${articleName} now has ${articlesInfo[articleName].upvotes} upvotes`)\n// });\n\napp.post(\"/api/articles/:name/upvote\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(req, res) {\n    var articleName, client, db, articleInfo, updatedArticleInfo;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            articleName = req.params.name;\n            _context2.next = 4;\n            return _mongodb.MongoClient.connect('mongodb://localhost:27017', {\n              useNewUrlParser: true,\n              useUnifiedTopology: true\n            });\n\n          case 4:\n            client = _context2.sent;\n            db = client.db('my-blog');\n            _context2.next = 8;\n            return db.collection('articles').findOne({\n              name: articleName\n            });\n\n          case 8:\n            articleInfo = _context2.sent;\n            _context2.next = 11;\n            return db.collection(\"articles\").updateOne({\n              name: articleName\n            }, {\n              '$set': {\n                upvotes: articleInfo.upvotes + 1 //actual change\n\n              }\n            });\n\n          case 11:\n            _context2.next = 13;\n            return db.collection('articles').findOne({\n              name: articleName\n            });\n\n          case 13:\n            updatedArticleInfo = _context2.sent;\n            res.status(200).json(updatedArticleInfo);\n            client.close();\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](0);\n            res.status(500).json({\n              message: 'Error connecting to db',\n              err: _context2.t0\n            });\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 18]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post(\"/api/articles/:name/add-comment\", function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text;\n  var articleName = req.params.name;\n  articlesInfo[articleName].comments.push({\n    username: username,\n    text: text\n  });\n  res.status(200).send(articlesInfo[articleName]);\n});\napp.listen(8000, function () {\n  return console.log('listening on port 8000');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsImFydGljbGVOYW1lIiwicGFyYW1zIiwibmFtZSIsIk1vbmdvQ2xpZW50IiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsImNsaWVudCIsImRiIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJhcnRpY2xlSW5mbyIsInN0YXR1cyIsImNsb3NlIiwibWVzc2FnZSIsImVyciIsInBvc3QiLCJ1cGRhdGVPbmUiLCJ1cHZvdGVzIiwidXBkYXRlZEFydGljbGVJbmZvIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsImFydGljbGVzSW5mbyIsImNvbW1lbnRzIiwicHVzaCIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUVBOzs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxHQUFHLEdBQUcsMEJBQVo7QUFFQUEsR0FBRyxDQUFDQyxHQUFKLENBQVFDLHVCQUFXQyxJQUFYLEVBQVI7QUFFQUgsR0FBRyxDQUFDSSxHQUFKLENBQVEscUJBQVI7QUFBQSxxRUFBK0IsaUJBQU1DLEdBQU4sRUFBV0MsR0FBWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVyQkMsWUFBQUEsV0FGcUIsR0FFUEYsR0FBRyxDQUFDRyxNQUFKLENBQVdDLElBRko7QUFBQTtBQUFBLG1CQUlOQyxxQkFBWUMsT0FBWixDQUFvQiwyQkFBcEIsRUFBaUQ7QUFDcEVDLGNBQUFBLGVBQWUsRUFBRyxJQURrRDtBQUVwRUMsY0FBQUEsa0JBQWtCLEVBQUU7QUFGZ0QsYUFBakQsQ0FKTTs7QUFBQTtBQUlyQkMsWUFBQUEsTUFKcUI7QUFRckJDLFlBQUFB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c0M7QUFFeEQsTUFBTXRCLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxNQUFKLENBQVdDLElBQS9CO0FBQ0FxQixFQUFBQSxZQUFZLENBQUN2QixXQUFELENBQVosQ0FBMEJ3QixRQUExQixDQUFtQ0MsSUFBbkMsQ0FBd0M7QUFBQ0osSUFBQUEsUUFBUSxFQUFSQSxRQUFEO0FBQVlDLElBQUFBLElBQUksRUFBSkE7QUFBWixHQUF4QztBQUNBdkIsRUFBQUEsR0FBRyxDQUFDYSxNQUFKLENBQVcsR0FBWCxFQUFnQmMsSUFBaEIsQ0FBcUJILFlBQVksQ0FBQ3ZCLFdBQUQsQ0FBakM7QUFDRixDQUxEO0FBT0FQLEdBQUcsQ0FBQ2tDLE1BQUosQ0FBVyxJQUFYLEVBQWlCO0FBQUEsU0FBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVosQ0FBTjtBQUFBLENBQWpCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9odWx5YWthcmFrYXlhL0Rlc2t0b3AvbXktYmxvZy1seW5kYS9yZWFjdC1ibG9nL2JhY2tlbmQvc3JjLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuLy8gY29ubmVjdCB0byBsb2NhbCBkYXRhYmFzZVxuaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcbiBcbi8vIGNvbnN0IGFydGljbGVzSW5mbyA9IHtcbi8vICAgJ2xlYXJuLXJlYWN0Jzoge1xuLy8gICAgICAgdXB2b3RlczogMCxcbi8vICAgICAgIGNvbW1lbnRzIDogW10sXG4vLyAgIH0sXG4vLyAgICdsZWFybi1ub2RlJzoge1xuLy8gICAgICAgdXB2b3RlczogMCxcbi8vICAgICAgIGNvbW1lbnRzIDogW11cbi8vICAgfSxcbi8vICAgJ215LXRob3VnaHRzLW9uLXJlc3VtZXMnOiB7XG4vLyAgICAgICB1cHZvdGVzOiAwLFxuLy8gICAgICAgY29tbWVudHMgOiBbXVxuLy8gICB9LFxuLy8gfVxuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5hcHAuZ2V0KFwiL2FwaS9hcnRpY2xlcy86bmFtZVwiLCBhc3luYyhyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdCgnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNycsIHtcbiAgICAgIHVzZU5ld1VybFBhcnNlciA6IHRydWUsXG4gICAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCBkYiA9IGNsaWVudC5kYignbXktYmxvZycpO1xuICAgIC8vcXVlcnkgZGJcbiAgICBjb25zdCBhcnRpY2xlSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7bmFtZSA6IGFydGljbGVOYW1lfSk7XG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oYXJ0aWNsZUluZm8pO1xuICBcbiAgICBjbGllbnQuY2xvc2UoKTtcbiAgfSBjYXRjaChlcnIpe1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHttZXNzYWdlIDonRXJyb3IgY29ubmVjdGluZyB0byBkYicgLCBlcnJ9KTtcbiAgfVxufSlcblxuLy8gYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL3Vwdm90ZVwiLCAocmVxLCByZXMpID0+IHtcbi8vICAgY29uc3QgYXJ0aWNsZU5hbWUgPSByZXEucGFyYW1zLm5hbWU7XG4vLyAgIGFydGljbGVzSW5mb1thcnRpY2xlTmFtZV0udXB2b3RlcyArPSAxO1xuLy8gICByZXMuc3RhdHVzKDIwMCkuc2VuZChgJHthcnRpY2xlTmFtZX0gbm93IGhhcyAke2FydGljbGVzSW5mb1thcnRpY2xlTmFtZV0udXB2b3Rlc30gdXB2b3Rlc2ApXG4vLyB9KTtcblxuYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL3Vwdm90ZVwiLCBhc3luYyhyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdCgnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNycsIHtcbiAgICAgICAgdXNlTmV3VXJsUGFyc2VyIDogdHJ1ZSxcbiAgICAgICAgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlXG4gICAgICB9KTtcbiAgICBjb25zdCBkYiA9IGNsaWVudC5kYignbXktYmxvZycpO1xuICBcbiAgICBjb25zdCBhcnRpY2xlSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7bmFtZSA6IGFydGljbGVOYW1lfSk7XG4gICAgLy91cGRhdGUgdGhlIHZvdGVzXG4gICAgYXdhaXQgZGIuY29sbGVjdGlvbihcImFydGljbGVzXCIpLnVwZGF0ZU9uZSh7bmFtZSA6IGFydGljbGVOYW1lfSwge1xuICAgICckc2V0Jzoge1xuICAgICAgdXB2b3RlcyA6IGFydGljbGVJbmZvLnVwdm90ZXMgKyAxLCAgLy9hY3R1YWwgY2hhbmdlXG4gICAgfSxcbiAgfSk7XG4gICAgY29uc3QgdXBkYXRlZEFydGljbGVJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKS5maW5kT25lKHtuYW1lIDogYXJ0aWNsZU5hbWV9KTtcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih1cGRhdGVkQXJ0aWNsZUluZm8pO1xuXG4gICAgY2xpZW50LmNsb3NlKCk7XG5cbiAgfSBjYXRjaChlcnIpe1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHttZXNzYWdlIDonRXJyb3IgY29ubmVjdGluZyB0byBkYicgLCBlcnJ9KTtcbiAgfVxufSk7XG5cbmFwcC5wb3N0KFwiL2FwaS9hcnRpY2xlcy86bmFtZS9hZGQtY29tbWVudFwiICwgKHJlcSwgcmVzKSA9PiB7XG4gICBjb25zdCB7dXNlcm5hbWUgLCB0ZXh0fSA9IHJlcS5ib2R5O1xuICAgY29uc3QgYXJ0aWNsZU5hbWUgPSByZXEucGFyYW1zLm5hbWU7XG4gICBhcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdLmNvbW1lbnRzLnB1c2goe3VzZXJuYW1lICwgdGV4dH0pO1xuICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXSk7XG59KTtcblxuYXBwLmxpc3Rlbig4MDAwLCAoKSA9PiBjb25zb2xlLmxvZygnbGlzdGVuaW5nIG9uIHBvcnQgODAwMCcpKVxuXG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "MongoClient",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "client",
        "db",
        "collection",
        "findOne",
        "articleInfo",
        "status",
        "close",
        "message",
        "err",
        "post",
        "updateOne",
        "upvotes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "articlesInfo",
        "comments",
        "push",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/hulyakarakaya/Desktop/my-blog-lynda/react-blog/backend/src/",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\n// connect to local database\nimport { MongoClient } from 'mongodb';\n \n// const articlesInfo = {\n//   'learn-react': {\n//       upvotes: 0,\n//       comments : [],\n//   },\n//   'learn-node': {\n//       upvotes: 0,\n//       comments : []\n//   },\n//   'my-thoughts-on-resumes': {\n//       upvotes: 0,\n//       comments : []\n//   },\n// }\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.get(\"/api/articles/:name\", async(req, res) => {\n  try {\n    const articleName = req.params.name;\n\n    const client = await MongoClient.connect('mongodb://localhost:27017', {\n      useNewUrlParser : true,\n      useUnifiedTopology: true\n    });\n    const db = client.db('my-blog');\n    //query db\n    const articleInfo = await db.collection('articles').findOne({name : articleName});\n    res.status(200).json(articleInfo);\n  \n    client.close();\n  } catch(err){\n    res.status(500).json({message :'Error connecting to db' , err});\n  }\n})\n\n// app.post(\"/api/articles/:name/upvote\", (req, res) => {\n//   const articleName = req.params.name;\n//   articlesInfo[articleName].upvotes += 1;\n//   res.status(200).send(`${articleName} now has ${articlesInfo[articleName].upvotes} upvotes`)\n// });\n\napp.post(\"/api/articles/:name/upvote\", async(req, res) => {\n  try {\n    const articleName = req.params.name;\n\n    const client = await MongoClient.connect('mongodb://localhost:27017', {\n        useNewUrlParser : true,\n        useUnifiedTopology: true\n      });\n    const db = client.db('my-blog');\n  \n    const articleInfo = await db.collection('articles').findOne({name : articleName});\n    //update the votes\n    await db.collection(\"articles\").updateOne({name : articleName}, {\n    '$set': {\n      upvotes : articleInfo.upvotes + 1,  //actual change\n    },\n  });\n    const updatedArticleInfo = await db.collection('articles').findOne({name : articleName});\n    res.status(200).json(updatedArticleInfo);\n\n    client.close();\n\n  } catch(err){\n    res.status(500).json({message :'Error connecting to db' , err});\n  }\n});\n\napp.post(\"/api/articles/:name/add-comment\" , (req, res) => {\n   const {username , text} = req.body;\n   const articleName = req.params.name;\n   articlesInfo[articleName].comments.push({username , text});\n   res.status(200).send(articlesInfo[articleName]);\n});\n\napp.listen(8000, () => console.log('listening on port 8000'))\n\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1598568055151
  }
}